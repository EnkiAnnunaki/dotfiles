# Inspired from https://github.com/mathiasbynens/dotfiles/blob/master/.gitconfig

[user]

	name = Pedro Pombeiro
	email = noreply@pedro.pombei.ro
	signingkey = B04C63F91EF312EF

[apply]

	# Detect whitespace errors when applying a patch
	whitespace = fix

[core]
	editor = nano

	# Repaint the screen, discarding any buffered input.  Useful if the file is changing while it is being viewed.
	pager = less -R

	excludesfile = ~/.gitignore-global

	# Treat spaces before tabs and all kinds of trailing whitespace as an error
	# [default] trailing-space: looks for spaces at the end of a line
	# [default] space-before-tab: looks for spaces before tabs at the beginning of a line
	whitespace = space-before-tab,-indent-with-non-tab,trailing-space

	# Make `git rebase` safer on macOS
	# More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[color]

	# Use colors in Git commands that are capable of colored output when
	# outputting to the terminal. (This is the default setting in Git â‰¥ 1.8.4.)
	ui = auto

[color "branch"]

	current = yellow reverse
	local = yellow
	remote = green

[color "diff"]

	meta = yellow bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions

[color "status"]

	added = yellow
	changed = green
	untracked = cyan

[commit]

	# https://help.github.com/articles/signing-commits-using-gpg/
	gpgsign = true
	template = ~/.git_commit_msg.txt

[push]

	# https://git-scm.com/docs/git-config#git-config-pushdefault
	default = simple

[pull]
	rebase = true

[rebase]

	autoSquash = true
	autoStash = true
	missingCommitsCheck = warn

[diff]

	# Detect copies as well as renames
	renames = copies

	tool = beyondcompare4
	guitool = beyondcompare4


[diff "bin"]

	# Use `hexdump` to diff binary files
	textconv = hexdump -v -C

[help]

	# Automatically correct and execute mistyped commands
	autocorrect = 1

[difftool]

	prompt = false

[difftool "beyondcompare4"]

	cmd = bcompare \"$LOCAL\" \"$REMOTE\"
	path = /usr/bin/bcompare
	keepTemporaries = false
	keepBackup = false
	trustExitCode = true

[merge]

	keepBackup = false
	tool = p4merge
	guitool = p4merge

[mergetool]

	prompt = false

[mergetool "p4merge"]

	cmd = p4merge \"$BASE\" \"$LOCAL\" \"$REMOTE\" \"$MERGED\"
	keepTemporaries = false
	keepBackup = false
	trustExitCode = false
	path = /usr/bin/p4merge

[alias]

  mr = !sh -c 'git fetch $1 merge-requests/$2/head:mr-$1-$2 && git checkout mr-$1-$2' -
	pb = prune-branches
	prune-branches = "!f() { for branch in $(git branch --list); do \\\n      if git branch -r --contains \"${branch}\" 2>&1 | rg '\\borigin/(master|main)$' >/dev/null; then \\\n        case \"${branch}\" in \\\n          main|master) \\\n          ;; \\\n          *) \\\n            git branch --delete \"${branch}\"; \\\n          ;; \\\n        esac; \\\n      fi; \\\n    done }; f"
	branch-to = "!f() {     if command -v \"$1\" >/dev/null; then\n      git log master.. --oneline --name-only --pretty=\"format:\" --diff-filter=CRAM | xargs \"$1\"; \\\n    else\n      echo \"'$1' is not an executable. Please specify an editor such as 'code'.\" > /dev/stderr; \\\n      return 1; \\\n    fi }; f"

[filter "lfs"]

	clean = git-lfs clean -- %f
	smudge = git-lfs smudge -- %f
	process = git-lfs filter-process
	required = true

# URL shorthands

[url "git@github.com:"]

	insteadOf = "gh:"
	pushInsteadOf = "github:"
	pushInsteadOf = "git://github.com/"

[url "git@gitlab.com:"]

	insteadOf = "gl:"
	pushInsteadOf = "gitlab:"
	pushInsteadOf = "git://gitlab.com/"

[url "git://github.com/"]

	insteadOf = "github:"

[url "git://gitlab.com/"]

	insteadOf = "gitlab:"

[url "git@gist.github.com:"]

	insteadOf = "gst:"
	pushInsteadOf = "gist:"
	pushInsteadOf = "git://gist.github.com/"

[gpg]
	program = /usr/local/bin/gpg
